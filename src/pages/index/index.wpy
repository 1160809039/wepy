<style lang="less">
.container{
  min-height: 100%;
  background: #eee;
}
 .task_list{
   margin-bottom: 50px;
   margin-left: 8px;
   margin-right: 8px;
  
 }

 .task_school{
   height: 50px;
   border-top:1px solid #eee; 
   background: #fff;
   font-size: 13px;
   color: #999;
   text-align: center;
   line-height: 50px;
 }
  .task_school Text{
    margin-left: 10px;
  }
 .task_title{
   padding: 0 5px;
   height: 30px ;
   margin-top: 30px;
   color: #999;
   font-size: 13px;
   margin-left: 15px;
   display: flex;

 }
 .task_title Text{
   text-align: center;
   width: 25%;
 }

 .data_more{
   display: flex;
   justify-content: center;
   align-items: center;
   position:relative;
 }
 .data_more van-loading{
   position: absolute;
   top:-40px;
   
 }
 .task_wrapper{
   margin-top: 20px;
 }
</style>
<template>
  <view class="container">
  
             
      <view class="task_school" @tap="toSelectSchool">
          {{school.text}}
          <Text class="fa fa-exchange"></Text>
       </view>
      <view class="task_wrapper">

         <van-tabs type="card" color="#409EFF">
           <van-tab title="寻找任务">

                 <view class="task_title">
          <Text>
            发布人
          </Text>  
            <Text>
            任务
           </Text>  
            <Text>
            重量
          </Text>  
           <Text>
            价格
           </Text>  
       </view>
      <scroll-view scroll-y scroll-with-animation="true">
       <view class="task_list" >

         <repeat for="{{taskdata}}" key="item.id" index="index" item="item">
           <TaskBar :taskdata="item"></TaskBar>
         </repeat>
        
     
       </view>

      </scroll-view>

           </van-tab>
           <van-tab title="已接任务">
             
             <view class="task_list">
                <repeat for="{{minedata}}" key="index" index="index" item="item">
                <MineTaskBar :taskdata="item"></MineTaskBar>
            </repeat>
              
             </view>

           </van-tab>

         </van-tabs>
      </view>
      <view wx:if="{{is_loading}}" class="data_more">
          <van-loading />
      </view>
    
     <van-toast id="van-toast" />
  </view>

</template>

<script>
  import wepy from 'wepy'

  import TaskBar from '../../components/taskbar/TaskBar';
  import MineTaskBar from '../../components/minetaskbar/MineTaskBar';
  import {taskList,selectReceive} from '../../api/task';
  import {SCHOOL,OPENID} from '../../config/common';
  import Toast from '../../miniprogram_npm/vant-weapp/toast/toast';
 import {SETPAGE} from '../../store/types/index'

  export default class Index extends wepy.page {
    config = {
    
      enablePullDownRefresh:true,
      "usingComponents": {
         "van-tab": "/miniprogram_npm/vant-weapp/tab/index",
         "van-tabs": "/miniprogram_npm/vant-weapp/tabs/index",
         "van-toast": "/miniprogram_npm/vant-weapp/toast/index",
          "van-loading": "/miniprogram_npm/vant-weapp/loading/index"

      }
    }
    components={
      TaskBar:TaskBar,
      MineTaskBar:MineTaskBar
    }
    onLoad(){
 
    
    }

    onPullDownRefresh(){
      let school=  wepy.getStorageSync(SCHOOL)
      this.methods.homeLoad(school.id,this,wepy.stopPullDownRefresh);
    }

    onReachBottom(){
     
      //底部刷新下一页
      let school=  wepy.getStorageSync(SCHOOL)
      let page=wepy.$store.getState().common.page+1;
  
      this.is_loading=true;
      taskList({ page:page, schoolId:school.id, size:8}).then(res=>{
         this.is_loading=false;
         this.$apply();
        if(res.statusCode===200){
          if(res.data.length>0){
                    this.taskdata= this.taskdata.concat(res.data);
                          this.$apply();
                          wepy.$store.dispatch({type:SETPAGE,payload:page})
           }else{
              Toast("已经是最底页了！")
           }
                         
                   }else{
                        Toast.fail('网络异常');
                   }
      })
   }
     onShow(){
      

      //  let query = wepy.createSelectorQuery();
      //   query.select(".task_list").boundingClientRect(
      //     res=>{
      //      console.log(res)
      //     }
      //   ).exec()  

      //防止未及时跳转登录页面
      let that=this;
      let openid=wepy.getStorageSync(OPENID)
      if(openid){
         let school=  wepy.getStorageSync(SCHOOL)
          if(!school && !school.id){
             wepy.navigateTo({
            url:'/pages/school/school'
          })
        } else{
             
              this.methods.homeLoad(school.id,this);
          }
       
      }else{
         wepy.navigateTo({
            url:'/pages/login/login'
          })
      }


     
     }
    data={
       taskdata:[],

       minedata:[],
       is_loading:false
    }

    computed={
       school(){
         return wepy.getStorageSync(SCHOOL)
       }
    }

    methods={
      toSelectSchool(){
        wepy.navigateTo({
          url:'/pages/school/school'
        })
      },
     async homeLoad(id,that,callback){
        //首页刷新
        let resTask= await  taskList({ page:1, schoolId:id, size:8});
         if(resTask.statusCode===200){
                          that.taskdata=resTask.data;
                          that.$apply();
                           wepy.$store.dispatch({type:SETPAGE,payload:1})
                   }else{
                        Toast.fail('网络异常');
                   }
                 let openid=  wepy.getStorageSync(OPENID);
                let resReceive=await selectReceive({openid:openid})  
                 if(resReceive.statusCode===200){
                   that.minedata=resReceive.data;
                    that.$apply();
                    if(callback){
                            //停止下拉刷新动画
                            callback();
                          }
                 } else{
                    Toast.fail('网络异常');
                 }    
                 
      }
    }
  }
</script>
