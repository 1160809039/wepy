<style lang="less">
.container{
  min-height: 100%;
  background: #eee;
  padding-top: 15px;
  box-sizing: border-box;
}
.minepublish_complete{
  font-size: 12px;
  padding-bottom: 50px;
}

.minepublish_wait{
  margin: 0px 15px;
  padding-bottom: 50px;
}

</style>
<template>
  <view class="container">
       <view wx:if="{{tabshow==0}}" class="minepublish_complete">
            
            <repeat for="{{confirmData}}" key="index" index="index" item="item">
               <ConfirmCard :taskdata="item"  @homeReflesh.user="homeReflesh"></ConfirmCard>
         </repeat>
       </view>


       <view wx:if="{{tabshow==1}}" class="minepublish_wait">

          <repeat for="{{taskData}}" key="index" index="index" item="item">
             <PublishCard :taskdata="item"  @homeReflesh.user="homeReflesh"></PublishCard>
          </repeat>
            
       </view>

<van-dialog id="van-dialog" />
     <van-tabbar active="{{ active }}" bind:change="onChange">
        <van-tabbar-item icon="passed" info="{{infocount}}">已完成</van-tabbar-item>
        <van-tabbar-item icon="clock">等待中</van-tabbar-item>
     </van-tabbar>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Toast from 'wepy-com-toast'
   
  import {selectTaskByOpenId,selectTaskConfirmed} from "../../api/task";
  import PublishCard from '../../components/publishcard/PublishCard';
  import ConfirmCard from '../../components/confirmcard/ConfirmCard';
  import {OPENID} from '../../config/common';
  export default class MinePublish extends wepy.page {
    config = {
       enablePullDownRefresh:true,
      "usingComponents": {
         "van-tabbar": "/miniprogram_npm/vant-weapp/tabbar/index",
          "van-tabbar-item": "/miniprogram_npm/vant-weapp/tabbar-item/index",
            "van-icon": "/miniprogram_npm/vant-weapp/icon/index"
      }
    }
    data={
      tabshow:0,
      taskData:[],
      confirmData:[],
      infocount:0,
    }
    components={
      PublishCard:PublishCard,
      ConfirmCard:ConfirmCard
    }

  onPullDownRefresh(){

      this.methods.homeLoad(this,wepy.stopPullDownRefresh);
    }
     onShow(){
     
         this.methods.homeLoad(this);
      
    }
    methods={
      
       toAdressList(){
          wepy.navigateTo({
            url:'/pages/address/list/list'
          })
       },
        onChange(event) {
        this.tabshow=event.detail;
       
       },
       //初始化数据
      async  homeLoad(that,callback){
             let openid=wepy.getStorageSync(OPENID);

      //加载我的待完成数据
        let resConfirm=await selectTaskConfirmed({openid:openid});
      if(resConfirm.statusCode===200){
           that.confirmData=resConfirm.data;
           that.infocount=resConfirm.data.length;
           that.$apply();
       }

     //加载我的发布的数据
      let resTask=await selectTaskByOpenId({openid:openid});
       if(resTask.statusCode===200){
           that.taskData=resTask.data;
           that.$apply();
       }
       if(callback){
         callback();
       }

       },

      //刷新页面
       homeReflesh(){
         
         this.methods.homeLoad(this);
       }
   
    }
  }
</script>
