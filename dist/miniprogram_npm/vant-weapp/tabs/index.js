'use strict';

var _create = require('./../common/create.js');

(0, _create.create)({
  relations: {
    '../tab/index': {
      type: 'descendant',

      linked: function linked(target) {
        var tabs = this.data.tabs;

        tabs.push({
          instance: target,
          data: target.data
        });
        this.setData({
          tabs: tabs,
          scrollable: tabs.length > this.data.swipeThreshold
        });
        this.setActiveTab();
      },
      unlinked: function unlinked(target) {
        var tabs = this.data.tabs.filter(function (item) {
          return item.instance !== target;
        });
        this.setData({
          tabs: tabs,
          scrollable: tabs.length > this.data.swipeThreshold
        });
        this.setActiveTab();
      }
    }
  },

  props: {
    color: {
      type: String,
      observer: 'setLine'
    },
    lineWidth: {
      type: Number,
      observer: 'setLine'
    },
    active: {
      type: null,
      value: 0
    },
    type: {
      type: String,
      value: 'line'
    },
    duration: {
      type: Number,
      value: 0.2
    },
    swipeThreshold: {
      type: Number,
      value: 4,
      observer: function observer() {
        this.setData({
          scrollable: this.data.tabs.length > this.data.swipeThreshold
        });
      }
    }
  },

  data: {
    tabs: [],
    lineStyle: '',
    scrollLeft: 0
  },

  ready: function ready() {
    this.setLine();
    this.scrollIntoView();
  },


  methods: {
    trigger: function trigger(eventName, index) {
      this.$emit(eventName, {
        index: index,
        title: this.data.tabs[index].data.title
      });
    },
    onTap: function onTap(event) {
      var index = event.currentTarget.dataset.index;

      if (this.data.tabs[index].data.disabled) {
        this.trigger('disabled', index);
      } else {
        this.trigger('click', index);
        this.setActive(index);
      }
    },
    setActive: function setActive(active) {
      if (active !== this.data.active) {
        this.trigger('change', active);
        this.setData({ active: active });
        this.setActiveTab();
        this.setLine();
        this.scrollIntoView();
      }
    },
    setLine: function setLine() {
      var _this = this;

      if (this.data.type !== 'line') {
        return;
      }

      this.getRect('.van-tab', true).then(function (rects) {
        var rect = rects[_this.data.active];
        var width = _this.data.lineWidth || rect.width;
        var left = rects.slice(0, _this.data.active).reduce(function (prev, curr) {
          return prev + curr.width;
        }, 0);
        left += (rect.width - width) / 2;

        _this.setData({
          lineStyle: '\n            width: ' + width + 'px;\n            background-color: ' + _this.data.color + ';\n            transform: translateX(' + left + 'px);\n            transition-duration: ' + _this.data.duration + 's;\n          '
        });
      });
    },
    setActiveTab: function setActiveTab() {
      var _this2 = this;

      this.data.tabs.forEach(function (item, index) {
        var data = {
          active: index === _this2.data.active
        };

        if (data.active) {
          data.inited = true;
        }

        if (data.active !== item.instance.data.active) {
          item.instance.setData(data);
        }
      });
    },


    // scroll active tab into view
    scrollIntoView: function scrollIntoView(immediate) {
      var _this3 = this;

      if (!this.data.scrollable) {
        return;
      }

      this.getRect('.van-tab', true).then(function (tabRects) {
        var tabRect = tabRects[_this3.data.active];
        var offsetLeft = tabRects.slice(0, _this3.data.active).reduce(function (prev, curr) {
          return prev + curr.width;
        }, 0);
        var tabWidth = tabRect.width;

        _this3.getRect('.van-tabs__nav').then(function (navRect) {
          var navWidth = navRect.width;
          _this3.setData({
            scrollLeft: offsetLeft - (navWidth - tabWidth) / 2
          });
        });
      });
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,